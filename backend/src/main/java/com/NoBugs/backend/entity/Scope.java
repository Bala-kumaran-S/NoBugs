package com.NoBugs.backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * Represents a bug bounty program scope defined by an organization.
 * This entity maps to the `scopes` table in the database.
 */
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok: Generates a no-argument constructor
@AllArgsConstructor // Lombok: Generates a constructor with all fields
@Entity // Marks this class as a JPA entity, mapped to a database table
@Table(name = "scopes") // Specifies the table name for this entity in the database
public class Scope {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database
    private Long id;

    // Many-to-one relationship with the Organization entity.
    // A scope belongs to one organization.
    @ManyToOne // A scope is associated with one organization.
    @JoinColumn(name = "organization_id", nullable = false) // Specifies the foreign key column in the scopes table
    private Organization organization; // The Organization object owning this scope

    @Column(nullable = false, length = 255) // Maps to a database column; cannot be null, max 255 chars
    private String title;

    @Column(nullable = false, length = 2048) // Maps to a database column; cannot be null, max 2048 chars for URL
    private String targetUrl; // The URL or domain of the application in scope

    @Column(columnDefinition = "TEXT") // Maps to a TEXT column in the database for potentially longer descriptions
    private String description;

    @Column(columnDefinition = "TEXT") // Maps to a TEXT column for Markdown/rich text rules
    private String inScopeRules; // Rules defining what is in-scope

    @Column(columnDefinition = "TEXT") // Maps to a TEXT column for Markdown/rich text rules
    private String outOfScopeRules; // Rules defining what is out-of-scope

    @Enumerated(EnumType.STRING) // Stores the enum name (e.g., "PUBLIC", "PRIVATE") as a string in the database
    @Column(nullable = false) // Maps to a database column; cannot be null
    private ScopeType type = ScopeType.PUBLIC; // PUBLIC or PRIVATE, default to PUBLIC

    @Column(nullable = false, updatable = false) // Maps to a database column; cannot be null, not updatable after creation
    private LocalDateTime createdAt; // Timestamp when the scope was created

    @Column(nullable = false) // Maps to a database column; cannot be null
    private LocalDateTime lastUpdatedAt; // Timestamp when the scope was last updated

    /**
     * Callback method executed before the entity is persisted (inserted) into the database.
     * Used to set the `createdAt` and `lastUpdatedAt` timestamps automatically.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now(); // Set to current timestamp
        lastUpdatedAt = LocalDateTime.now(); // Set to current timestamp
    }

    /**
     * Callback method executed before the entity is updated in the database.
     * Used to update the `lastUpdatedAt` timestamp automatically.
     */
    @PreUpdate
    protected void onUpdate() {
        lastUpdatedAt = LocalDateTime.now(); // Update to current timestamp on each update
    }
}
