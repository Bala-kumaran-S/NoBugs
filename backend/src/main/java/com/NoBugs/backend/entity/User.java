package com.NoBugs.backend.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

/**
 * Represents a user in the NoBugs platform.
 * This entity maps to the `users` table and can represent an Admin,
 * a Student/Hacker, or a user who registers an Organization.
 */
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok: Generates a no-argument constructor
@AllArgsConstructor // Lombok: Generates a constructor with all fields
@Entity // Marks this class as a JPA entity, mapped to a database table
@Table(name = "users", uniqueConstraints = { // Specifies table name and unique constraints
        @UniqueConstraint(columnNames = {"username"}), // Ensures username is unique across all users
        @UniqueConstraint(columnNames = {"email"})    // Ensures email is unique across all users
})
public class User {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "user_id")  // Configures the primary key to be auto-generated by the database
    private Long id;

    @Column(nullable = false, unique = true, length = 100) // Maps to a database column; cannot be null, must be unique, max 100 chars
    private String username;

    @Column(nullable = false, unique = true, length = 255) // Maps to a database column; cannot be null, must be unique, max 255 chars
    private String email;

    @Column(nullable = false, length = 255) // Maps to a database column; cannot be null, max 255 chars (for hashed password)
    private String password; // Store hashed password (e.g., BCrypt)

    @Column(nullable = false) // Maps to a database column; cannot be null
    private Integer reputationPoints = 0; // Default to 0 for new users

    @Column(nullable = false, updatable = false) // Maps to a database column; cannot be null, not updatable after creation
    private LocalDateTime registeredAt; // Timestamp when the user registered

    // Defines a many-to-many relationship with the Role entity.
    // FetchType.LAZY means roles are loaded only when accessed.
    // CascadeType.ALL means all operations (persist, merge, remove) propagate to associated roles.
    @ManyToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL) // EAGER fetch for roles for simpler security context loading
    @JoinTable(name = "user_roles", // Specifies the join table for this many-to-many relationship
            joinColumns = @JoinColumn(name = "user_id"),         // Foreign key in user_roles table pointing to users table
            inverseJoinColumns = @JoinColumn(name = "role_id")) // Foreign key in user_roles table pointing to roles table
    private Set<Role> roles = new HashSet<>(); // Use HashSet for efficient lookup of roles

    /**
     * Callback method executed before the entity is persisted (inserted) into the database.
     * Used to set the `registeredAt` timestamp automatically.
     */
    @PrePersist
    protected void onCreate() {
        registeredAt = LocalDateTime.now(); // Set to current timestamp
    }
}
