package com.NoBugs.backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * Represents an organization (e.g., college, department, project team, or even an individual student's project)
 * that can host bug bounty programs.
 * This entity maps to the `organizations` table in the database.
 */
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok: Generates a no-argument constructor
@AllArgsConstructor // Lombok: Generates a constructor with all fields
@Entity // Marks this class as a JPA entity, mapped to a database table
@Table(name = "organizations") // Specifies the table name for this entity in the database
public class Organization {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database
    private Long id;

    @Column(nullable = false, unique = true, length = 255) // Maps to a database column; cannot be null, must be unique, max 255 chars
    private String name;

    @Column(columnDefinition = "TEXT") // Maps to a TEXT column in the database for potentially longer descriptions
    private String description;

    @Column(nullable = false, length = 255) // Maps to a database column; cannot be null, max 255 chars
    private String contactEmail;

    // Many-to-one relationship with the User entity.
    // The user who registered this organization.
    @ManyToOne // An organization is registered by one user.
    @JoinColumn(name = "registered_by_user_id", nullable = false) // Specifies the foreign key column in the organizations table
    private User registeredBy; // The User object representing the registrant

    @Column(nullable = false, updatable = false) // Maps to a database column; cannot be null, not updatable after creation
    private LocalDateTime createdAt; // Timestamp when the organization was registered

    @Column(nullable = false) // Maps to a database column; cannot be null
    private Boolean isApproved = false; // Flag indicating if the organization has been approved by an Admin

    /**
     * Callback method executed before the entity is persisted (inserted) into the database.
     * Used to set the `createdAt` timestamp automatically.
     */
    @PrePersist
    protected void onCreate() {
        createdAt = LocalDateTime.now(); // Set to current timestamp
    }
}
