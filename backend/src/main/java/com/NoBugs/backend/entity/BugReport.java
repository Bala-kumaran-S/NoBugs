package com.NoBugs.backend.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;
import java.util.UUID; // For generating unique_id

/**
 * Represents a bug report submitted by a Student/Hacker.
 * This entity maps to the `bug_reports` table in the database.
 */
@Data // Lombok: Generates getters, setters, toString, equals, and hashCode
@NoArgsConstructor // Lombok: Generates a no-argument constructor
@AllArgsConstructor // Lombok: Generates a constructor with all fields
@Entity // Marks this class as a JPA entity, mapped to a database table
@Table(name = "bug_reports") // Specifies the table name for this entity in the database
public class BugReport {

    @Id // Marks this field as the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database
    private Long id;

    @Column(nullable = false, unique = true, length = 36) // Maps to a database column; cannot be null, must be unique, max 36 chars for UUID
    private String uniqueId; // A globally unique ID for the bug report (e.g., UUID string)

    // Many-to-one relationship with the User entity (reporter).
    // A bug report is submitted by one user.
    @ManyToOne // A bug report has one reporter.
    @JoinColumn(name = "reporter_user_id", nullable = false) // Specifies the foreign key column in the bug_reports table
    private User reporter; // The User object who submitted the report

    // Many-to-one relationship with the Scope entity.
    // A bug report belongs to one scope.
    @ManyToOne // A bug report belongs to one scope.
    @JoinColumn(name = "scope_id", nullable = false) // Specifies the foreign key column in the bug_reports table
    private Scope scope; // The Scope object against which the bug was reported

    @Column(nullable = false, length = 255) // Maps to a database column; cannot be null, max 255 chars
    private String title;

    @Column(nullable = false, columnDefinition = "TEXT") // Maps to a TEXT column in the database; cannot be null
    private String description;

    @Enumerated(EnumType.STRING) // Stores the enum name (e.g., "CRITICAL") as a string in the database
    @Column(nullable = false) // Maps to a database column; cannot be null
    private Severity reporterSeverity; // Severity assessed by the reporter

    @Enumerated(EnumType.STRING) // Stores the enum name (e.g., "HIGH") as a string in the database
    @Column(nullable = true) // Maps to a database column; can be null until an admin assesses
    private Severity adminSeverity; // Final severity assessed by the Admin

    @Column(length = 2048) // Maps to a database column, max 2048 chars for URL
    private String affectedEndpoint;

    @Column(nullable = false, columnDefinition = "TEXT") // Maps to a TEXT column in the database; cannot be null
    private String stepsToReproduce;

    @Column(length = 2048) // Maps to a database column, max 2048 chars for URL to attachment
    private String attachmentUrl1; // URL to optional screenshot/video proof in object storage (e.g., S3, Google Cloud Storage)

    @Column(nullable = false, updatable = false) // Maps to a database column; cannot be null, not updatable after creation
    private LocalDateTime submittedAt; // Timestamp when the bug report was submitted

    @Enumerated(EnumType.STRING) // Stores the enum name (e.g., "SUBMITTED") as a string in the database
    @Column(nullable = false) // Maps to a database column; cannot be null
    private BugStatus status = BugStatus.SUBMITTED; // Current status of the bug report, default to SUBMITTED

    @Column(columnDefinition = "TEXT") // Maps to a TEXT column for longer notes
    private String adminNotes; // Notes added by the Admin during validation

    /**
     * Callback method executed before the entity is persisted (inserted) into the database.
     * Used to set the `uniqueId` and `submittedAt` timestamp automatically.
     */
    @PrePersist
    protected void onCreate() {
        // Generate a UUID for uniqueId if it's not already set
        if (this.uniqueId == null) {
            this.uniqueId = UUID.randomUUID().toString();
        }
        submittedAt = LocalDateTime.now(); // Set to current timestamp
    }
}
